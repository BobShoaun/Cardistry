/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/helpers.js":
/*!************************!*\
  !*** ./src/helpers.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setupCards\": () => (/* binding */ setupCards)\n/* harmony export */ });\n// temporary function, so i dont have to copy paste all the cards in the DOM manually\r\n\r\nconst suits = [\"♠\", \"♥\", \"♣\", \"♦\"];\r\nconst ranks = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\r\n\r\nconst setupCards = (target, numCards = 16, draggable = false) => {\r\n  const hand = document.querySelector(target);\r\n  if (!hand) return;\r\n\r\n  let cards = \"\";\r\n\r\n  for (let i = 0; i < numCards; i++) {\r\n    const rank = ranks[i % ranks.length];\r\n    const suit = \"♥\";\r\n    const color = suit === \"♥\" || suit === \"♦\" ? \"red\" : \"black\";\r\n\r\n    cards += /*html*/ `\r\n      <div class=\"card poker-card ${color}\" draggable=\"${draggable}\">\r\n        <div class=\"content\">\r\n          <div class=\"front\">\r\n            <div class=\"top-left\">\r\n              <p class=\"rank\">${rank}</p>\r\n              <p class=\"suit\">${suit}</p>\r\n            </div>\r\n            <div class=\"bottom-right\">\r\n              <p class=\"rank\">${rank}</p>\r\n              <p class=\"suit\">${suit}</p>\r\n            </div>\r\n            <p class=\"center-suit\">${suit}</p>\r\n          </div>\r\n          <div class=\"back\" draggable=\"false\">\r\n            <img src=\"images/card-back.png\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  hand.innerHTML = cards;\r\n};\r\n\n\n//# sourceURL=webpack://cardistry-website/./src/helpers.js?");

/***/ }),

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _cardistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cardistry */ \"../cardistry/index.js\");\n/* harmony import */ var _cardistry_presets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../cardistry/presets */ \"../cardistry/presets.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ \"./src/helpers.js\");\n\r\n\r\n\r\n\r\n(0,_helpers__WEBPACK_IMPORTED_MODULE_2__.setupCards)(\".example.main\");\r\n\r\nnew _cardistry__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\r\n  target: \".example.main\",\r\n  loop: true,\r\n  // relative: true,\r\n  // timing: \"linear\",\r\n  states: [\r\n    {\r\n      delay: 700,\r\n    },\r\n    {\r\n      ...(0,_cardistry_presets__WEBPACK_IMPORTED_MODULE_1__.spreadCenter)(),\r\n      delay: 500,\r\n    },\r\n    {\r\n      delay: 500,\r\n      ...(0,_cardistry_presets__WEBPACK_IMPORTED_MODULE_1__.fan)(7),\r\n    },\r\n    {\r\n      delay: 500,\r\n      rotate: 0,\r\n      originY: 2,\r\n      duration: 300,\r\n    },\r\n    {\r\n      delay: 100,\r\n      moveY: (i, n) => (i + 0.5 - n / 2) * 20,\r\n      moveX: (i, n) => (i + 0.5 - n / 2) * 25,\r\n      duration: 300,\r\n    },\r\n    {\r\n      delay: 200,\r\n      duration: 400,\r\n      moveY: (i, n) => (i + 0.5 - n / 2) * -20,\r\n      moveX: (i, n) => (i + 0.5 - n / 2) * -25,\r\n    },\r\n    {\r\n      delay: i => i * 50 + 100,\r\n      moveX: (i, n) => (i + 0.5 - n / 2) * -25,\r\n      duration: 200,\r\n    },\r\n    {\r\n      ...(0,_cardistry_presets__WEBPACK_IMPORTED_MODULE_1__.flip)(),\r\n      moveX: (i, n) => (i + 0.5 - n / 2) * -25,\r\n      delay: i => i * 50,\r\n      order: (i, n) => n - i,\r\n    },\r\n    // {\r\n    //   rotateZ: (i, n) => (i + 0.5 - n / 2) * -20,\r\n    //   translateX: (i, n) => (i + 0.5 - n / 2) * -25,\r\n    //   delay: 500,\r\n    //   contentRotateY: 180,\r\n    // },\r\n    {\r\n      flipY: 180,\r\n      order: (i, n) => n - i,\r\n      delay: 400,\r\n    },\r\n    {\r\n      delay: 100,\r\n      flipY: 180,\r\n      duration: 100,\r\n    },\r\n    {\r\n      flipY: 180,\r\n      ...(0,_cardistry_presets__WEBPACK_IMPORTED_MODULE_1__.disperse)(500),\r\n    },\r\n  ],\r\n});\r\n\r\n/*\r\n    do we want them to all play at the same time, or stagger them?\r\n    if  we want to stagger, which card goes first? front or back?\r\n\r\n    simple builder:\r\n    preset animations, just play them, reset b4 each anim\r\n\r\n    animation builder:\r\n    specify deltas\r\n    */\r\n\n\n//# sourceURL=webpack://cardistry-website/./src/script.js?");

/***/ }),

/***/ "../cardistry/index.js":
/*!*****************************!*\
  !*** ../cardistry/index.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst linear = t => t;\r\nconst quad = t => t * t;\r\nconst easeIn = t => t * t * t;\r\nconst easeOut = t => 1 - Math.pow(1 - t, 3);\r\nconst ease = t => {\r\n  if (t <= 0.5) return 2 * t * t;\r\n  t -= 0.5;\r\n  return 2 * t * (1 - t) + 0.5;\r\n};\r\n\r\nconst elastic = t => {\r\n  const c4 = (2 * Math.PI) / 3;\r\n  return t === 0 ? 0 : t === 1 ? 1 : Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c4) + 1;\r\n};\r\n\r\nconst bounce = t => {\r\n  const n1 = 7.5625;\r\n  const d1 = 2.75;\r\n  if (t < 1 / d1) return n1 * t * t;\r\n  else if (t < 2 / d1) return n1 * (t -= 1.5 / d1) * t + 0.75;\r\n  else if (t < 2.5 / d1) return n1 * (t -= 2.25 / d1) * t + 0.9375;\r\n  return n1 * (t -= 2.625 / d1) * t + 0.984375;\r\n};\r\n\r\nclass Cardistry {\r\n  #speed;\r\n\r\n  constructor({\r\n    target,\r\n    initialState = {\r\n      moveX: 0,\r\n      moveY: 0,\r\n      rotate: 0,\r\n      scale: 1,\r\n      originX: 0.5,\r\n      originY: 0.5,\r\n      order: 1,\r\n      flipY: 0,\r\n    },\r\n    states,\r\n    loop = true,\r\n    relative = false,\r\n    autoplay = true,\r\n    timing = ease,\r\n    pauseWhenNotInView = true,\r\n  }) {\r\n    this.target = target;\r\n    this.initialState = initialState;\r\n    this.states = states;\r\n    this.loop = loop;\r\n    this.relative = relative;\r\n    this.autoplay = autoplay;\r\n    this.#speed = 1;\r\n    this.status = \"stopped\"; // playing, paused, stopped\r\n    this.timing = this.getTiming(timing);\r\n    this.initialize();\r\n    if (autoplay) this.play();\r\n  }\r\n\r\n  isInViewport() {\r\n    const rect = this.parent.getBoundingClientRect();\r\n    return (\r\n      rect.top >= 0 &&\r\n      rect.left >= 0 &&\r\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\r\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\r\n    );\r\n  }\r\n\r\n  initialize() {\r\n    this.parent = document.querySelector(this.target);\r\n    if (!this.parent) return;\r\n    this.cards = this.parent.querySelectorAll(\".card\");\r\n    this.cardContents = [...this.cards].map(card => card.querySelector(\".content\"));\r\n    const {\r\n      moveX = 0,\r\n      moveY = 0,\r\n      rotate = 0,\r\n      scale = 1,\r\n      originX = 0.5,\r\n      originY = 0.5,\r\n      order = 1,\r\n      flipY = 0,\r\n    } = this.initialState;\r\n\r\n    const n = this.cards.length;\r\n\r\n    requestAnimationFrame(() => {\r\n      for (let i = 0; i < n; i++) {\r\n        const getValue = prop => (typeof prop === \"function\" ? prop(i, n) : prop);\r\n\r\n        this.cards[i].style.transformOrigin = `${getValue(originX) * 100}% ${getValue(originY) * 100}%`;\r\n        this.cards[i].style.zIndex = getValue(order);\r\n        this.cards[i].style.transform = `translateX(${getValue(moveX)}px) translateY(${getValue(moveY)}px)\r\n        rotateZ(${getValue(rotate)}deg) scale(${getValue(scale)})`;\r\n        this.cardContents[i].style.transform = `rotateY(${getValue(flipY)}deg)`;\r\n      }\r\n    });\r\n  }\r\n\r\n  pause() {\r\n    this.status = \"paused\";\r\n  }\r\n\r\n  stop() {\r\n    this.status = \"stopped\";\r\n  }\r\n\r\n  set speed(value) {\r\n    this.#speed = Math.max(value, 0);\r\n  }\r\n\r\n  // credits: https://javascript.info/js-animation\r\n  async #animate({ timing, draw, duration, delay }) {\r\n    await new Promise(resolve => setTimeout(resolve, delay / this.#speed));\r\n    return new Promise((resolve, reject) => {\r\n      let prevTime = performance.now();\r\n      let totalTime = 0;\r\n      const frame = time => {\r\n        // if (!this.isInViewport()) {\r\n        //   this.status = \"paused\";\r\n        // } else this.status = \"playing\";\r\n        if (this.status === \"stopped\") return resolve();\r\n\r\n        const deltaTime = time - prevTime;\r\n        totalTime += deltaTime * (this.status === \"paused\" ? 0 : this.#speed);\r\n        prevTime = time;\r\n\r\n        // normalizedTime goes from 0 to 1\r\n        const normalizedTime = Math.min(totalTime / duration, 1);\r\n        const progress = timing(normalizedTime);\r\n        draw(progress);\r\n        requestAnimationFrame(frame);\r\n        if (normalizedTime >= 1) return resolve();\r\n      };\r\n      requestAnimationFrame(frame);\r\n    });\r\n  }\r\n\r\n  getTiming(timingInput) {\r\n    if (!timingInput) return null;\r\n    if (typeof timingInput === \"function\") return timingInput;\r\n    switch (timingInput) {\r\n      case \"linear\":\r\n        return linear;\r\n      case \"ease\":\r\n        return ease;\r\n      case \"quad\":\r\n        return quad;\r\n      case \"ease-in\":\r\n        return easeIn;\r\n      case \"ease-out\":\r\n        return easeOut;\r\n      case \"elastic\":\r\n        return elastic;\r\n      case \"bounce\":\r\n        return bounce;\r\n      default:\r\n        console.error(\"invalid timing input for state\");\r\n    }\r\n  }\r\n\r\n  async play() {\r\n    if (this.status === \"paused\") {\r\n      this.status = \"playing\";\r\n      return;\r\n    }\r\n    if (this.status !== \"stopped\") return; // avoid multiple instances\r\n    this.status = \"playing\";\r\n    const n = this.cards.length;\r\n\r\n    const prevStateCards = new Array(n);\r\n    for (let i = 0; i < n; i++) prevStateCards[i] = { ...this.initialState };\r\n\r\n    for (let k = typeof this.loop === \"boolean\" ? Infinity : this.loop; this.status !== \"stopped\" && k; k--) {\r\n      for (const state of this.states) {\r\n        const animations = [];\r\n\r\n        for (let i = 0; i < n; i++) {\r\n          const getValue = propName =>\r\n            typeof state[propName] === \"function\" ? state[propName](i, n) : state[propName];\r\n          const getValueRelative = propName =>\r\n            getValue(propName) ?? (this.relative ? prevStateCards[i][propName] : null);\r\n\r\n          const { duration = 500 } = state;\r\n          const _moveX = getValueRelative(\"moveX\") ?? 0;\r\n          const _moveY = getValueRelative(\"moveY\") ?? 0;\r\n          const _rotate = getValueRelative(\"rotate\") ?? 0;\r\n          const _scale = getValueRelative(\"scale\") ?? 1;\r\n          const _originX = getValueRelative(\"originX\") ?? 0.5;\r\n          const _originY = getValueRelative(\"originY\") ?? 0.5;\r\n          const _order = getValueRelative(\"order\") ?? 1;\r\n          const _flipY = getValueRelative(\"flipY\") ?? 0;\r\n\r\n          const _delay = getValue(\"delay\") ?? 0;\r\n          const _timing = this.getTiming(state.timing) ?? this.timing;\r\n\r\n          const _prevState = { ...prevStateCards[i] };\r\n\r\n          const animation = this.#animate({\r\n            timing: _timing,\r\n            draw: progress => {\r\n              this.cards[i].style.transformOrigin = `${_originX * 100}% ${_originY * 100}%`;\r\n              if (progress >= 0.5) {\r\n                this.cards[i].style.zIndex = _order;\r\n              }\r\n              this.cards[i].style.transform = `translateX(${\r\n                (_moveX - _prevState.moveX) * progress + _prevState.moveX\r\n              }px)\r\n          translateY(${(_moveY - _prevState.moveY) * progress + _prevState.moveY}px) rotateZ(${\r\n                (_rotate - _prevState.rotate) * progress + _prevState.rotate\r\n              }deg) scale(${(_scale - _prevState.scale) * progress + _prevState.scale})`;\r\n              this.cardContents[i].style.transform = `rotateY(${\r\n                (_flipY - _prevState.flipY) * progress + _prevState.flipY\r\n              }deg)`;\r\n            },\r\n            duration,\r\n            delay: _delay,\r\n          });\r\n          animations.push(animation);\r\n\r\n          prevStateCards[i].moveX = _moveX;\r\n          prevStateCards[i].moveY = _moveY;\r\n          prevStateCards[i].rotate = _rotate;\r\n          prevStateCards[i].scale = _scale;\r\n          prevStateCards[i].originX = _originX;\r\n          prevStateCards[i].originY = _originY;\r\n          prevStateCards[i].flipY = _flipY;\r\n          prevStateCards[i].order = _order;\r\n        }\r\n\r\n        await Promise.all(animations);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Cardistry);\r\n\n\n//# sourceURL=webpack://cardistry-website/../cardistry/index.js?");

/***/ }),

/***/ "../cardistry/presets.js":
/*!*******************************!*\
  !*** ../cardistry/presets.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spreadLeft\": () => (/* binding */ spreadLeft),\n/* harmony export */   \"spreadRight\": () => (/* binding */ spreadRight),\n/* harmony export */   \"spreadCenter\": () => (/* binding */ spreadCenter),\n/* harmony export */   \"stack\": () => (/* binding */ stack),\n/* harmony export */   \"disperse\": () => (/* binding */ disperse),\n/* harmony export */   \"fan\": () => (/* binding */ fan),\n/* harmony export */   \"flip\": () => (/* binding */ flip)\n/* harmony export */ });\n// preset animations\r\nconst spreadLeft = (amount = 25) => ({\r\n  moveX: i => i * -amount,\r\n});\r\n\r\nconst spreadRight = (amount = 25) => ({\r\n  moveX: i => i * amount,\r\n});\r\n\r\nconst spreadCenter = (amount = 25) => ({\r\n  moveX: (i, n) => (i + 0.5 - n / 2) * amount,\r\n});\r\n\r\nconst stack = () => ({\r\n  moveX: 0,\r\n  moveY: 0,\r\n  rotate: 0,\r\n  duration: 300,\r\n});\r\n\r\nconst disperse = (amount = 200) => ({\r\n  moveX: () => Math.random() * amount - amount / 2,\r\n  moveY: () => Math.random() * amount - amount / 2,\r\n  rotate: () => Math.random() * 180 - 90,\r\n  duration: 400,\r\n  delay: (i, n) => (n - i) * 100,\r\n});\r\n\r\nconst fan = (angle = 5) => ({\r\n  originY: 2,\r\n  rotate: (i, n) => (i + 0.5 - n / 2) * angle,\r\n});\r\n\r\nconst flip = () => ({\r\n  flipY: 180,\r\n  duration: 400,\r\n});\r\n\n\n//# sourceURL=webpack://cardistry-website/../cardistry/presets.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/script.js");
/******/ 	
/******/ })()
;