/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cardistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cardistry */ \"../cardistry/index.js\");\n\r\n\r\nconst spreadLeft = () => ({\r\n  translateX: i => i * -25,\r\n});\r\n\r\nconst spreadRight = () => ({\r\n  translateX: i => i * 25,\r\n  duration: 500,\r\n  delay: 500,\r\n});\r\n\r\nconst stack = () => ({\r\n  translateX: 0,\r\n  translateY: 0,\r\n  rotateZ: 0,\r\n  duration: 500,\r\n  delay: 500,\r\n});\r\n\r\nconst disperse = () => ({\r\n  translateX: () => Math.random() * 200 - 100,\r\n  translateY: () => Math.random() * 200 - 100,\r\n  rotateZ: () => Math.random() * 180 - 90,\r\n  duration: 500,\r\n  delay: i => i * 100,\r\n});\r\n\r\nconst fan = () => ({\r\n  transformOrigin: \"50% 200%\",\r\n  rotateZ: i => i * 5 - 40,\r\n  duration: 500,\r\n  delay: 1000,\r\n});\r\n\r\nconst flip = () => ({\r\n  contentRotateY: 180,\r\n  duration: 1000,\r\n  delay: 500,\r\n});\r\n\r\n(0,cardistry__WEBPACK_IMPORTED_MODULE_0__.setupCards)(\".spread-x\");\r\n\r\n(0,cardistry__WEBPACK_IMPORTED_MODULE_0__.build)({\r\n  target: \".spread-x\",\r\n  loop: true,\r\n  states: [\r\n    stack(),\r\n    fan(),\r\n    stack(),\r\n    spreadRight(),\r\n    flip(),\r\n    disperse(),\r\n    spreadRight(),\r\n    {\r\n      translateY: 100,\r\n      duration: 500,\r\n      delay: (i, n) => (15 - i) * 100,\r\n    },\r\n\r\n    // {\r\n    //   duration: 500,\r\n    // },\r\n    // {\r\n    //   translateX: 0,\r\n    //   rotateZ: 0,\r\n    //   duration: 500,\r\n    // },\r\n    // {\r\n    //   duration: 500,\r\n    // },\r\n    // translateX: i => i * -20,\r\n    // rotateZ: i => i * 5,\r\n    // duration: i => (15 - i) * 100,\r\n    // delay: i => i * 75,\r\n  ],\r\n  // states: [\r\n  //   {\r\n  //     transition: { stagger: 0.5, duration: 500 },\r\n  //     layouts: [\"stack\"],\r\n  //     duration: 500,\r\n  //     anchor: \"center\",\r\n  //   },\r\n  //   {\r\n  //     transition: { stagger: 0.5, duration: 500 },\r\n  //     layouts: [\"spread-x\"],\r\n  //     hover: [\"scale\"],\r\n  //     duration: 500,\r\n  //     anchor: \"center\",\r\n  //   },\r\n  // ],\r\n});\r\n\r\n// play({\r\n//   target: \".spread-x\",\r\n//   states: [\r\n//     { layout: \"stack\", duration: 300 },\r\n\r\n//     { stagger: 0.3, duration: 500 },\r\n//     { layout: \"spread-x\", duration: 500, anchor: \"center\" },\r\n//     { stagger: 0.8, duration: 500 },\r\n//     { layout: \"stack\", duration: 500 },\r\n\r\n//     { stagger: 0.5, duration: 500 },\r\n//     { layout: \"spread-x\", duration: 500, anchor: \"left\" },\r\n//     { stagger: 1, duration: 1000 },\r\n//     { layout: \"stack\", duration: 500 },\r\n\r\n//     { stagger: 0.5, duration: 500 },\r\n//     { layout: \"spread-x\", duration: 500, anchor: \"right\" },\r\n//     { stagger: 1, duration: 1000 },\r\n//     { layout: \"stack\", duration: 500 },\r\n//   ],\r\n//   loop: true,\r\n// });\r\n\r\n/*\r\n    do we want them to all play at the same time, or stagger them?\r\n    if  we want to stagger, which card goes first? front or back?\r\n\r\n    simple builder:\r\n    preset animations, just play them, reset b4 each anim\r\n\r\n    animation builder:\r\n    specify deltas\r\n    */\r\n\n\n//# sourceURL=webpack://cardistry_example/./src/index.js?");

/***/ }),

/***/ "../cardistry/index.js":
/*!*****************************!*\
  !*** ../cardistry/index.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"play\": () => (/* reexport safe */ _src_script_js__WEBPACK_IMPORTED_MODULE_0__.play),\n/* harmony export */   \"setupCards\": () => (/* reexport safe */ _src_setup_js__WEBPACK_IMPORTED_MODULE_1__.setupCards),\n/* harmony export */   \"build\": () => (/* reexport safe */ _src_builder_js__WEBPACK_IMPORTED_MODULE_2__.build)\n/* harmony export */ });\n/* harmony import */ var _src_script_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/script.js */ \"../cardistry/src/script.js\");\n/* harmony import */ var _src_setup_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/setup.js */ \"../cardistry/src/setup.js\");\n/* harmony import */ var _src_builder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/builder.js */ \"../cardistry/src/builder.js\");\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://cardistry_example/../cardistry/index.js?");

/***/ }),

/***/ "../cardistry/src/builder.js":
/*!***********************************!*\
  !*** ../cardistry/src/builder.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"build\": () => (/* binding */ build)\n/* harmony export */ });\nconst build = async ({ target, states, loop }) => {\r\n  const hand = document.querySelector(target);\r\n  if (!hand) return;\r\n\r\n  const cards = hand.querySelectorAll(\".card\");\r\n  const cardProps = [...cards].map(() => ({\r\n    translateX: 0,\r\n    translateY: 0,\r\n    rotateX: 0,\r\n    rotateY: 0,\r\n    rotateZ: 0,\r\n    scale: 1,\r\n    zIndex: 1,\r\n    transformOrigin: \"50% 50%\",\r\n    contentRotateY: 0,\r\n    contentRotateZ: 0,\r\n    hoverScale: 1,\r\n    duration: 0,\r\n    delay: 0,\r\n    timing: \"ease\",\r\n  }));\r\n\r\n  const apply = async state => {\r\n    cardProps.forEach((cardProp, i) => {\r\n      for (const [prop, value] of Object.entries(state)) {\r\n        if (typeof value === \"function\") {\r\n          cardProp[prop] = value(i);\r\n          continue;\r\n        }\r\n        cardProp[prop] = value;\r\n      }\r\n    });\r\n\r\n    if (state.transformOrigin) {\r\n      cards.forEach((card, i) => {\r\n        const { transformOrigin } = cardProps[i];\r\n        card.style.transformOrigin = transformOrigin;\r\n      });\r\n\r\n      await new Promise(resolve => setTimeout(resolve, 20)); // sleep\r\n    }\r\n\r\n    const totalDurations = [];\r\n\r\n    cards.forEach((card, i) => {\r\n      const {\r\n        translateX,\r\n        translateY,\r\n        rotateX,\r\n        rotateY,\r\n        rotateZ,\r\n        scale,\r\n        zIndex,\r\n        transformOrigin,\r\n        contentRotateY,\r\n        contentRotateZ,\r\n        hoverScale,\r\n        duration,\r\n        delay,\r\n        timing,\r\n      } = cardProps[i];\r\n\r\n      totalDurations[i] = delay + duration;\r\n\r\n      card.style.transformOrigin = transformOrigin;\r\n      card.style.transform = `translateX(${translateX}px) translateY(${translateY}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg) scale(${scale})`;\r\n      card.style.transitionDuration = `${duration}ms`;\r\n      card.style.transitionDelay = `${delay}ms`;\r\n      card.style.transitionTimingFunction = timing;\r\n      // card.style.transitionDelay = `${1000}ms`;\r\n      // card.style.zIndex = zIndex;\r\n\r\n      const cardContent = card.querySelector(\".content\");\r\n      cardContent.style.transform = `rotateY(${contentRotateY}deg) rotateZ(${contentRotateZ}deg)`;\r\n      cardContent.style.transitionDuration = `${duration}ms`;\r\n      cardContent.style.transitionDelay = `${delay}ms`;\r\n    });\r\n\r\n    return new Promise((resolve, reject) =>\r\n      setTimeout(() => resolve, Math.max(...totalDurations))\r\n    );\r\n  };\r\n\r\n  await new Promise(resolve => setTimeout(resolve, 500)); // sleep\r\n\r\n  if (typeof loop === \"boolean\")\r\n    while (loop) for (const state of states) await apply(state);\r\n\r\n  for (let i = loop ?? 0; i >= 0; i--)\r\n    for (const state of states) await apply(state);\r\n};\r\n\n\n//# sourceURL=webpack://cardistry_example/../cardistry/src/builder.js?");

/***/ }),

/***/ "../cardistry/src/script.js":
/*!**********************************!*\
  !*** ../cardistry/src/script.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"play\": () => (/* binding */ play)\n/* harmony export */ });\nconst play = ({ target, states, loop }) => {\r\n  const hand = document.querySelector(target);\r\n\r\n  if (!hand) return;\r\n\r\n  const cards = hand.querySelectorAll(\".card\");\r\n  const cardProps = [...cards].map(() => ({\r\n    translateX: 0,\r\n    translateY: 0,\r\n    rotateX: 0,\r\n    rotateY: 0,\r\n    rotateZ: 0,\r\n    scale: 1,\r\n    zIndex: 1,\r\n    transformOrigin: \"50% 50%\",\r\n    contentRotateY: 0,\r\n    contentRotateZ: 0,\r\n    hoverScale: 1,\r\n  }));\r\n\r\n  const applyLayout = (state, transition) => {\r\n    // console.log(state.layout, transition);\r\n    const delay = transition.stagger\r\n      ? (transition.duration / cards.length) * transition.stagger\r\n      : 0;\r\n    const duration = transition.duration - (cards.length - 1) * delay;\r\n\r\n    cardProps.forEach((card) => {\r\n      // card.translateX = 0;\r\n      // card.translateY = 0;\r\n      // card.rotateZ = 0;\r\n      // card.transformOrigin = \"50% 50%\";\r\n      // card.contentRotateY = 0;\r\n      card.contentRotateZ = 0;\r\n    });\r\n\r\n    switch (state.layout) {\r\n      case \"stack\":\r\n        cardProps.forEach((card) => {\r\n          card.translateX = 0;\r\n          card.translateY = 0;\r\n          card.rotateZ = 0;\r\n        });\r\n        break;\r\n      case \"spread-x\": {\r\n        const spacing = 50;\r\n        const totalWidth = (cards.length - 1) * spacing;\r\n        let initialX = 0;\r\n        if (state.anchor === \"right\") initialX = -totalWidth;\r\n        else if (state.anchor === \"center\") initialX = -totalWidth / 2;\r\n\r\n        cardProps.forEach((card, i) => {\r\n          card.translateX = initialX + spacing * i;\r\n          card.rotateZ = 0;\r\n        });\r\n        break;\r\n      }\r\n      case \"spread-y\":\r\n        cardProps.forEach((card, i) => {\r\n          card.translateY = 50 * i;\r\n          card.rotateZ = 0;\r\n        });\r\n        break;\r\n      case \"rotate-x\": {\r\n        const spacing = 50;\r\n        const totalWidth = (cards.length - 1) * spacing;\r\n        const rotation = 180 / (cardProps.length - 1);\r\n\r\n        let initialX = 0;\r\n        if (state.anchor === \"right\") initialX = -totalWidth;\r\n        else if (state.anchor === \"center\") initialX = -totalWidth / 2;\r\n\r\n        // let initialRotation = 0;\r\n        // if (state.anchor === \"right\") initialRotation = -arcAngle;\r\n        // else if (state.anchor === \"center\") initialRotation = -arcAngle / 2;\r\n\r\n        cardProps.forEach((card, i) => {\r\n          card.translateX = initialX + spacing * i;\r\n          card.contentRotateZ = rotation * i;\r\n        });\r\n        break;\r\n      }\r\n      case \"fan\": {\r\n        const arcAngle = 120;\r\n        const arcLength = 2;\r\n        const rotation = arcAngle / (cardProps.length - 1);\r\n\r\n        let initialRotation = 0;\r\n        if (state.anchor === \"right\") initialRotation = -arcAngle;\r\n        else if (state.anchor === \"center\") initialRotation = -arcAngle / 2;\r\n\r\n        cardProps.forEach((card, i) => {\r\n          card.translateX = 0;\r\n          card.translateY = 0;\r\n          card.transformOrigin = `50% ${arcLength * 100}%`;\r\n          card.rotateZ = initialRotation + rotation * i;\r\n        });\r\n\r\n        break;\r\n      }\r\n      case \"snake\": {\r\n        let rotation = 0;\r\n        cardProps.forEach((card, i) => {\r\n          card.rotateZ = rotation;\r\n          if (i < cardProps.length / 2) {\r\n            card.transformOrigin = \"50% 100%\";\r\n          } else {\r\n            card.transformOrigin = \"50% 100%\";\r\n            card.translateY = 300;\r\n            rotation = 0;\r\n          }\r\n          rotation += 30;\r\n        });\r\n\r\n        break;\r\n      }\r\n      case \"flip-x\":\r\n        cardProps.forEach((card, i) => {\r\n          const flipped = card.contentRotateY === 180;\r\n          card.contentRotateY = flipped ? 0 : 180;\r\n          card.zIndex = flipped ? cardProps.length - i : 0;\r\n        });\r\n        break;\r\n      case \"spread-xy\": {\r\n        // const radius = 8;\r\n        const f = (x) => {\r\n          return x;\r\n        };\r\n\r\n        const spacing = 25;\r\n        const totalWidth = (cards.length - 1) * spacing;\r\n        let initialX = 0;\r\n        if (state.anchor === \"right\") initialX = -totalWidth;\r\n        else if (state.anchor === \"center\") initialX = -totalWidth / 2;\r\n\r\n        cardProps.forEach((card, i) => {\r\n          card.translateX = initialX + spacing * i;\r\n          card.translateY = initialX + spacing * i;\r\n          card.rotateZ = 0;\r\n        });\r\n        break;\r\n      }\r\n      case \"hover\": {\r\n        cardProps.forEach((card) => {\r\n          card.hoverScale = 1.1;\r\n        });\r\n        break;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n    cards.forEach((card, i) => {\r\n      const {\r\n        translateX,\r\n        translateY,\r\n        rotateX,\r\n        rotateY,\r\n        rotateZ,\r\n        scale,\r\n        zIndex,\r\n        transformOrigin,\r\n        contentRotateY,\r\n        contentRotateZ,\r\n        hoverScale,\r\n      } = cardProps[i];\r\n      card.style.transformOrigin = transformOrigin;\r\n      card.style.transform = `translateX(${translateX}px) translateY(${translateY}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg) scale(${scale})`;\r\n      card.style.transitionDelay = `${i * delay}ms`;\r\n      card.style.transitionDuration = `${duration}ms`;\r\n      card.style.zIndex = zIndex;\r\n\r\n      const cardContent = card.querySelector(\".content\");\r\n      cardContent.style.transform = `rotateY(${contentRotateY}deg) rotateZ(${contentRotateZ}deg)`;\r\n      cardContent.style.transitionDuration = `${duration}ms`;\r\n      cardContent.style.transitionDelay = `${i * delay}ms`;\r\n\r\n      card.onmouseover = () => {\r\n        card.style.transform = `translateX(${translateX}px) translateY(${translateY}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg) scale(${hoverScale})`;\r\n      };\r\n\r\n      card.onmouseleave = () => {\r\n        card.style.transform = `translateX(${translateX}px) translateY(${translateY}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg) scale(${scale})`;\r\n      };\r\n\r\n      // setTimeout(() => {\r\n      // }, i * delay);\r\n    });\r\n  };\r\n\r\n  const timeouts = [];\r\n  const intervals = [];\r\n\r\n  applyLayout(states[0], { stagger: false, duration: 0 }); // set initial layout\r\n  let elapsedDuration = states[0].duration;\r\n\r\n  const totalDuration = states.reduce(\r\n    (prev, state) => prev + state.duration,\r\n    0\r\n  );\r\n\r\n  for (let i = 1; i < states.length; i += 2) {\r\n    const transition = states[i];\r\n    const state = states[i + 1];\r\n    timeouts.push(\r\n      setTimeout(() => {\r\n        if (loop)\r\n          intervals.push(\r\n            setInterval(() => applyLayout(state, transition), totalDuration)\r\n          );\r\n        applyLayout(state, transition);\r\n      }, elapsedDuration)\r\n    );\r\n    elapsedDuration += state.duration + transition.duration;\r\n  }\r\n\r\n  const cancel = () => {\r\n    intervals.forEach(clearInterval);\r\n    timeouts.forEach(clearTimeout);\r\n  };\r\n\r\n  return { cancel };\r\n};\r\n\n\n//# sourceURL=webpack://cardistry_example/../cardistry/src/script.js?");

/***/ }),

/***/ "../cardistry/src/setup.js":
/*!*********************************!*\
  !*** ../cardistry/src/setup.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setupCards\": () => (/* binding */ setupCards)\n/* harmony export */ });\nconst setupCards = target => {\r\n  const hand = document.querySelector(target);\r\n  if (!hand) return;\r\n\r\n  const numCards = 15;\r\n  const cardHeight = 120;\r\n  const cardWidth = 75;\r\n\r\n  const card = hand.querySelector(\".card\");\r\n\r\n  for (let i = 0; i < numCards; i++) {\r\n    const newCard = card.cloneNode(true);\r\n    hand.appendChild(newCard);\r\n\r\n    // const card = document.createElement(\"div\");\r\n    // card.classList.add(\"card\");\r\n    // card.style.width = `${cardWidth}px`;\r\n    // card.style.height = `${cardHeight}px`;\r\n    // const content = document.createElement(\"div\");\r\n    // content.classList.add(\"content\");\r\n    // const front = document.createElement(\"div\");\r\n    // front.classList.add(\"front\");\r\n\r\n    // const back = document.createElement(\"div\");\r\n    // back.classList.add(\"back\");\r\n    // content.appendChild(front);\r\n    // content.appendChild(back);\r\n    // card.appendChild(content);\r\n    // hand.appendChild(card);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://cardistry_example/../cardistry/src/setup.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;